// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CustomerAllianceQuestionnaire
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
extension Swift.Optional {
  public var isNil: Swift.Bool {
    get
  }
  public var isSome: Swift.Bool {
    get
  }
}
public enum RatingType {
  case star
  case circle
  case rectangle
  case emoji
  public static func == (a: CustomerAllianceQuestionnaire.RatingType, b: CustomerAllianceQuestionnaire.RatingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Frequency {
  case one
  case infinite
  case answeredClosed([Swift.String : Any])
}
extension CustomerAllianceQuestionnaire.Frequency : Swift.Equatable {
  public static func == (lhs: CustomerAllianceQuestionnaire.Frequency, rhs: CustomerAllianceQuestionnaire.Frequency) -> Swift.Bool
}
public func == (lhs: [Swift.String : Any], rhs: [Swift.String : Any]) -> Swift.Bool
public struct CASurveyManager {
  public static let sharedManager: CustomerAllianceQuestionnaire.CASurveyManager
  public func configure(primaryColor: UIKit.UIColor = UIColor(red: 59.0 / 255.0, green: 98.0 / 255.0, blue: 178.0 / 255.0, alpha: 1.0), headerAndTitleColor: UIKit.UIColor = UIColor.white, paragraphTextColor: UIKit.UIColor = UIColor(red: 88.0 / 255.0, green: 99.0 / 255.0, blue: 112.0 / 255.0, alpha: 1.0), shouldShowFooter: Swift.Bool = true, ratingStyle: CustomerAllianceQuestionnaire.RatingType = .rectangle, frequecyToSubmitForGivenHash: CustomerAllianceQuestionnaire.Frequency = .answeredClosed(["answered": 1, "closed": 1]), preferredLocale: Swift.String? = nil)
  public func showSurveyPopUp(vc: UIKit.UIViewController, withHash hash: Swift.String, attributes: [Swift.String : Any]? = [:])
}
extension CustomerAllianceQuestionnaire.RatingType : Swift.Equatable {}
extension CustomerAllianceQuestionnaire.RatingType : Swift.Hashable {}
